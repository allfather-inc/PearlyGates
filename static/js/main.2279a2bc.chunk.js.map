{"version":3,"sources":["demos/Effects.js","demos/Demo1.js","index.js"],"names":["extend","EffectComposer","ShaderPass","SavePass","RenderPass","triColorMix","uniforms","tDiffuse1","value","tDiffuse2","tDiffuse3","vertexShader","fragmentShader","Effects","composer","useRef","savePass","blendPass","swap","useThree","scene","gl","size","camera","useMemo","rtA","THREE","width","height","rtB","pixelRatio","getPixelRatio","useEffect","current","setSize","useFrame","render","delay1","delay2","renderTarget","texture","ref","args","attachArray","needsSwap","FXAAShader","uniforms-resolution-value-x","uniforms-resolution-value-y","CopyShader","roundedSquareWave","t","delta","a","f","Math","PI","atan","sin","Dots","vec","transform","positions","Array","map","_","i","position","x","y","floor","random","right","distances","pos","length","cos","angleTo","clock","dist","elapsedTime","wave","copy","multiplyScalar","setPosition","setMatrixAt","instanceMatrix","needsUpdate","App","orthographic","zoom","colorManagement","resize","polyfill","ResizeObserver","attach","basename","className","id","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.2279a2bc.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nimport React, { useMemo, useEffect, useRef } from 'react'\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\n// Shader that composites the r,g,b channels of 3 textures, respectively\r\nconst triColorMix = {\r\n  uniforms: {\r\n    tDiffuse1: { value: null },\r\n    tDiffuse2: { value: null },\r\n    tDiffuse3: { value: null }\r\n  },\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    uniform sampler2D tDiffuse1;\r\n    uniform sampler2D tDiffuse2;\r\n    uniform sampler2D tDiffuse3;\r\n    \r\n    void main() {\r\n      vec4 del0 = texture2D(tDiffuse1, vUv);\r\n      vec4 del1 = texture2D(tDiffuse2, vUv);\r\n      vec4 del2 = texture2D(tDiffuse3, vUv);\r\n      // min alpha hides until all buffers are full\r\n      float alpha = min(min(del0.a, del1.a), del2.a);\r\n      gl_FragColor = vec4(del0.r, del1.g, del2.b, alpha);\r\n    }\r\n  `\r\n}\r\n\r\nexport function Effects() {\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const blendPass = useRef()\r\n  const swap = useRef(false) // Whether we need to swap the delay buffers\r\n  const { scene, gl, size, camera } = useThree()\r\n  const { rtA, rtB } = useMemo(() => {\r\n    // Spare render targets for holding the previous two individual frames\r\n    const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n    return { rtA, rtB }\r\n  }, [size])\r\n  const pixelRatio = gl.getPixelRatio() // Needed for anti-aliasing pass\r\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    composer.current.render()\r\n    // Swap render targets and update dependencies\r\n    let delay1 = swap.current ? rtB : rtA\r\n    let delay2 = swap.current ? rtA : rtB\r\n    savePass.current.renderTarget = delay2\r\n    blendPass.current.uniforms['tDiffuse2'].value = delay1.texture\r\n    blendPass.current.uniforms['tDiffuse3'].value = delay2.texture\r\n    swap.current = !swap.current\r\n  }, 1)\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={blendPass} args={[triColorMix, 'tDiffuse1']} needsSwap={false} />\r\n      <savePass attachArray=\"passes\" ref={savePass} needsSwap={true} />\r\n      <shaderPass\r\n        attachArray=\"passes\"\r\n        args={[FXAAShader]}\r\n        uniforms-resolution-value-x={1 / (size.width * pixelRatio)}\r\n        uniforms-resolution-value-y={1 / (size.height * pixelRatio)}\r\n      />\r\n      <shaderPass attachArray=\"passes\" args={[CopyShader]} />\r\n    </effectComposer>\r\n  )\r\n}\r\n","import React, { useMemo, useRef } from 'react'\nimport { Canvas, useFrame } from 'react-three-fiber'\nimport { Effects } from './Effects'\nimport { ResizeObserver } from '@juggle/resize-observer'\nimport * as THREE from 'three'\n\n// NON-INTERACTIVE VERSION\n\n// Equation from https://dsp.stackexchange.com/a/56529\n// Visualized here https://www.desmos.com/calculator/uakymahh4u\nconst roundedSquareWave = (t, delta, a, f) => {\n  return ((2 * a) / Math.PI) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta)\n}\n\nfunction Dots() {\n  const ref = useRef() // Reference to our InstancedMesh\n  const { vec, transform, positions, distances } = useMemo(() => {\n    // Variables for intermediary calculations\n    const vec = new THREE.Vector3()\n    const transform = new THREE.Matrix4()\n\n    // Precompute randomized initial positions (array of Vector3)\n    const positions = [...Array(10000)].map((_, i) => {\n      const position = new THREE.Vector3()\n      // Place in a grid\n      position.x = (i % 100) - 50\n      position.y = Math.floor(i / 100) - 50\n\n      // Offset every other column (hexagonal pattern)\n      position.y += (i % 2) * 0.5\n\n      // Add some noise\n      position.x += Math.random() * 0.3\n      position.y += Math.random() * 0.3\n      return position\n    })\n\n    // Precompute initial distances with octagonal offset\n    const right = new THREE.Vector3(1, 0, 0)\n    const distances = positions.map((pos) => {\n      // See https://www.desmos.com/calculator/4eiqbvjdzm\n      return pos.length() + Math.cos(pos.angleTo(right) * 8) * 0.5\n    })\n    return { vec, transform, positions, distances }\n  }, [])\n  useFrame(({ clock }) => {\n    for (let i = 0; i < 10000; ++i) {\n      const dist = distances[i]\n\n      // Distance affects the wave phase\n      const t = clock.elapsedTime - dist / 25\n\n      // Oscillates between -0.4 and +0.4 with period of 3.8 seconds\n      const wave = roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, 1 / 3.8)\n\n      // Scale initial position by our oscillator\n      vec.copy(positions[i]).multiplyScalar(wave + 1.3)\n\n      // Apply the Vector3 position to the Matrix4\n      transform.setPosition(vec)\n\n      // Update Matrix4 for this instance\n      ref.current.setMatrixAt(i, transform)\n    }\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh ref={ref} args={[null, null, 10000]}>\n      <circleBufferGeometry args={[0.15]} /> {/* Circle with radius of 0.15 */}\n      <meshBasicMaterial /> {/* Default to white color */}\n    </instancedMesh>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas\n      orthographic\n      camera={{ zoom: 20 }}\n      colorManagement={false} // Disabling colorManagement gives us raw colors (pure whites)\n      resize={{ polyfill: ResizeObserver }} // Allows @react-spring/three to work in Safari\n    >\n      <color attach=\"background\" args={['black']} />\n      <Effects />\n      <Dots />\n    </Canvas>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter as Router, Switch, Route, Redirect, Link } from 'react-router-dom'\nimport './base.css'\nimport Demo1 from './demos/Demo1'\nimport Demo2 from './demos/Demo2'\n\n// Demos inspired by:\n// https://twitter.com/beesandbombs/status/1329796242298245124\n\nfunction App () {\n  return (\n    <Router basename='/'>\n      <div className='content'>\n        <h2 className='content__title'>\n          Indian <span className='content__title_inverted'>Innovation</span> Company\n        </h2>\n      </div>\n      <div id='animation'>\n        <Demo1 />\n      </div>\n    </Router>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}